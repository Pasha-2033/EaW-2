#Created by lead programmer of EaW 2 (vk: @uber_medic, @communistic_sistema) https://github.com/Pasha-2033/EaW-2
#vesrion 1.1
#use MTTH implementation instead of scriped effects, less code, write code with pleasure :)

#Usage:
#set_variable = { global.math_args^0 = your_variable }
#set_temp_variable = { temp = mtth:ceil }
#if you want to use other functions - use this table:
#	tg = sin/cos
#	ctg = 1/tg
#	sec = 1/cos
#	csc = 1/sin
#	arccos = pi/2 - arcsin
#	arcctg = pi/2 - arctg
#	arccsc = arcsin(1/x)
#	sinh = (e^x - e^-x) / 2
#	cosh = (e^x + e^-x) / 2
#	tgh = (e^x - e^-x) / (e^x + e^-x) = (e^2x - 1) / (e^2x + 1)
#	ctgh = 1 / tgh
#	erfc = 1 - erf

ceil = {
	#argument for ceil(x): x -> global.math_args^0
	base = 0
	modifier = {
		set_temp_variable = {
			temp = global.math_args^0
		}
		round_temp_variable = temp
		if = {
			limit = {
				check_variable = {
					temp < global.math_args^0
				}
			}
			add_to_temp_variable = {
				temp = 1
			}
		}
		add = temp
	}
}
floor = {
	#argument for floor(x): x -> global.math_args^0
	base = 0
	modifier = {
		set_temp_variable = {
			temp = global.math_args^0
		}
		round_temp_variable = temp
		if = {
			limit = {
				check_variable = {
					temp > global.math_args^0
				}
			}
			subtract_from_temp_variable = {
				temp = 1
			}
		}
		add = temp
	}
}
division_without_remainder = {
	#arguments for x // y: x -> global.math_args^0, y -> global.math_args^1
	base = 0
	modifier = {
		set_temp_variable = {
			temp_0 = global.math_args^0
		}
		divide_temp_variable = {
			temp_0 = global.math_args^1
		}
		round_temp_variable = temp_0
		set_temp_variable = {
			temp_1 = temp_0
		}
		multiply_temp_variable = {
			temp_1 = global.math_args^1
		}
		if = {
			limit = {
				check_variable = {
					temp_1 > global.math_args^0
				}
			}
			subtract_from_temp_variable = {
				temp_0 = 1
			}
		}
		add = temp_0
	}
}
remainder_of_division = {
	#arguments for x % y: x -> global.math_args^0, y -> global.math_args^1
	base = 0
	modifier = {
		set_temp_variable = {
			temp_0 = global.math_args^0
		}
		divide_temp_variable = {
			temp_0 = global.math_args^1
		}
		round_temp_variable = temp_0
		set_temp_variable = {
			temp_1 = temp_0
		}
		multiply_temp_variable = {
			temp_1 = global.math_args^1
		}
		if = {
			limit = {
				check_variable = {
					temp_1 > global.math_args^0
				}
			}
			subtract_from_temp_variable = {
				temp_0 = 1
			}
		}
		set_temp_variable = {
			temp_1 = global.math_args^0
		}
		multiply_temp_variable = {
			temp_0 = global.math_args^1
		}
		subtract_from_temp_variable = {
			temp_1 = temp_0
		}
		add = temp_1
	}
}
#ln - wait in version 1.2
#exp - wait in version 1.2
abs = {
	#argument for abs(x): x -> global.math_args^0
	base = 0
	modifier = {
		set_temp_variable = {
			temp = global.math_args^0
		}
		if = {
			limit = {
				check_variable = {
					temp < 0
				}
			}
			multiply_temp_variable = {
				temp = -1
			}
		}
		add = temp
	}
}
sqrt_2 = {
	#argument for sqrt_2(x): x -> global.math_args^0
	base = 0
	modifier = {
		if = {
			limit = {
				NOT = {
					check_variable = {
						global.math_args^0 < 0
					}
				}
			}
			set_temp_variable = { temp = global.math_args^0 }
			divide_temp_variable = { temp = 2 }
			set_temp_variable = { r = temp }
			#cycle 1
			if = {
				limit = {
					check_variable = {
						r > 0
					}
				}
				set_temp_variable = { temp = global.math_args^0 }
				divide_temp_variable = { temp = r }
				add_to_temp_variable = { r = temp }
				divide_temp_variable = { r = 2 }
			}
			#cycle 2
			if = {
				limit = {
					check_variable = {
						r > 0
					}
				}
				set_temp_variable = { temp = global.math_args^0 }
				divide_temp_variable = { temp = r }
				add_to_temp_variable = { r = temp }
				divide_temp_variable = { r = 2 }
			}
			#cycle 3
			if = {
				limit = {
					check_variable = {
						r > 0
					}
				}
				set_temp_variable = { temp = global.math_args^0 }
				divide_temp_variable = { temp = r }
				add_to_temp_variable = { r = temp }
				divide_temp_variable = { r = 2 }
			}
			#cycle 4
			if = {
				limit = {
					check_variable = {
						r > 0
					}
				}
				set_temp_variable = { temp = global.math_args^0 }
				divide_temp_variable = { temp = r }
				add_to_temp_variable = { r = temp }
				divide_temp_variable = { r = 2 }
			}
		}
		else = {
			set_temp_variable = { r = -1 }
		}
		add = r
	}
}
#sqrt(x, n) - wait in version 1.2
#sqrt_n = {
#	base = 0
#}
sin = {
	#argument for sin(x): x -> global.math_args^0 in radians
	base = 0
	modifier = {
		set_temp_variable = {
			x = global.math_args^0
		}
		set_temp_variable = {
			n2x = x
		}
		multiply_temp_variable = {
			n2x = n2x
		}
		multiply_temp_variable = {
			n2x = -1
		}
		set_temp_variable = {
			sum = x
		}
		#any loop doesn`t work, so there is cycles
		#cycle 1
		divide_temp_variable = {
			x = 6
		}
		multiply_temp_variable = {
			x = n2x
		}
		add_to_temp_variable = {
			sum = x
		}
		#cycle 2
		divide_temp_variable = {
			x = 20
		}
		multiply_temp_variable = {
			x = n2x
		}
		add_to_temp_variable = {
			sum = x
		}
		#cycle 3
		divide_temp_variable = {
			x = 42
		}
		multiply_temp_variable = {
			x = n2x
		}
		add_to_temp_variable = {
			sum = x
		}
		#cycle 4
		divide_temp_variable = {
			x = 72
		}
		multiply_temp_variable = {
			x = n2x
		}
		add_to_temp_variable = {
			sum = x
		}
		#cycle 5
		divide_temp_variable = {
			x = 110
		}
		multiply_temp_variable = {
			x = n2x
		}
		add_to_temp_variable = {
			sum = x
		}
		add = sum
	}
}
cos = {
	base = 0
	modifier = {
		#argument for cos(x): x -> global.math_args^0 in radians
		set_temp_variable = {
			n2x = global.math_args^0
		}
		multiply_temp_variable = {
			n2x = n2x
		}
		multiply_temp_variable = {
			n2x = -1
		}
		set_temp_variable = {
			counter_0 = 1
		}
		set_temp_variable = {
			sum = 1
		}
		set_temp_variable = {
			temp = 1
		}
		#any loop doesn`t work, so there is cycles
		#cycle 1
		multiply_temp_variable = {
			temp = n2x
		}
		divide_temp_variable = {
			temp = 2
		}
		add_to_temp_variable = {
			sum = temp
		}
		#cycle 2
		multiply_temp_variable = {
			temp = n2x
		}
		divide_temp_variable = {
			temp = 12 
		}
		add_to_temp_variable = {
			sum = temp
		}
		#cycle 3
		multiply_temp_variable = {
			temp = n2x
		}
		divide_temp_variable = {
			temp = 30 
		}
		add_to_temp_variable = {
			sum = temp
		}
		#cycle 4
		multiply_temp_variable = {
			temp = n2x
		}
		divide_temp_variable = {
			temp = 56 
		}
		add_to_temp_variable = {
			sum = temp
		}
		#cycle 5
		multiply_temp_variable = {
			temp = n2x
		}
		divide_temp_variable = {
			temp = 90 
		}
		add_to_temp_variable = {
			sum = temp
		}
		add = sum
	}
}
arcsin = {
	#argument for arcsin(x): x -> global.math_args^0 in radians
	base = 0
	modifier = {
		set_temp_variable = {
			x = global.math_args^0
		}
		set_temp_variable = {
			2x = x
		}
		multiply_temp_variable = {
			2x = x
		}
		set_temp_variable = {
			sum = x
		}
		#any loop doesn`t work, so there is cycles
		#cycle 1
		multiply_temp_variable = {
			x = 2x
		}
		set_temp_variable = {
			temp_x = x
		}
		divide_temp_variable = {
			temp_x = 6
		}
		add_to_temp_variable = {
			sum = temp_x
		}
		#cycle 2
		multiply_temp_variable = {
			x = 2x
		}
		set_temp_variable = {
			temp_x = x
		}
		multiply_temp_variable = {
			temp_x = 0.075
		}
		add_to_temp_variable = {
			sum = temp_x
		}
		#cycle 3
		multiply_temp_variable = {
			x = 2x
		}
		set_temp_variable = {
			temp_x = x
		}
		divide_temp_variable = {
			temp_x = 22.4
		}
		add_to_temp_variable = {
			sum = temp_x
		}
		#cycle 4
		multiply_temp_variable = {
			x = 2x
		}
		set_temp_variable = {
			temp_x = x
		}
		divide_temp_variable = {
			temp_x = 32.914
		}
		add_to_temp_variable = {
			sum = temp_x
		}
		add = sum
	}
}
arctg = {
	base = 0
	modifier = {
		#argument for arctg(x): x -> global.math_args^0 in radians
		#limit! x^2<=1
		set_temp_variable = {
			x = global.math_args^0
		}
		set_temp_variable = {
			n2x = x
		}
		multiply_temp_variable = {
			n2x = n2x
		}
		multiply_temp_variable = {
			n2x = -1
		}
		set_temp_variable = {
			sum = x
		}
		#any loop doesn`t work, so there is cycles
		#cycle 1
		multiply_temp_variable = {
			x = n2x
		}
		add_to_temp_variable = {
			sum = x
		}
		#cycle 2
		multiply_temp_variable = {
			x = n2x
		}
		set_temp_variable = {
			temp = x
		}
		divide_temp_variable = {
			temp = 3
		}
		add_to_temp_variable = {
			sum = temp
		}
		#cycle 3
		multiply_temp_variable = {
			x = n2x
		}
		set_temp_variable = {
			temp = x
		}
		divide_temp_variable = {
			temp = 5
		}
		add_to_temp_variable = {
			sum = temp
		}
		#cycle 4
		multiply_temp_variable = {
			x = n2x
		}
		set_temp_variable = {
			temp = x
		}
		divide_temp_variable = {
			temp = 7
		}
		add_to_temp_variable = {
			sum = temp
		}
		#cycle 5
		multiply_temp_variable = {
			x = n2x
		}
		set_temp_variable = {
			temp = x
		}
		divide_temp_variable = {
			temp = 9
		}
		add_to_temp_variable = {
			sum = temp
		}
		add = sum
	}
}
erf = {
	#argument for erf(x): x -> global.math_args^0
	base = 0
	modifier = {
		set_temp_variable = {
			2_d_sqrt_pi = 1.128 #~2/sqrt(pi)
		}
		set_temp_variable = {
			x = global.math_args^0
		}
		set_temp_variable = {
			n2x = x
		}
		multiply_temp_variable = {
			n2x = n2x
		}
		multiply_temp_variable = {
			n2x = -1
		}
		set_temp_variable = {
			sum = x
		}
		#cycle 1
		multiply_temp_variable = {
			x = n2x
		}
		set_temp_variable = {
			temp_x = x
		}
		divide_temp_variable = {
			temp_x = 3
		}
		add_to_temp_variable = {
			sum = temp_x
		}
		#cycle 2
		multiply_temp_variable = {
			x = n2x
		}
		set_temp_variable = {
			temp_x = x
		}
		divide_temp_variable = {
			temp_x = 10
		}
		add_to_temp_variable = {
			sum = temp_x
		}
		#cycle 3
		multiply_temp_variable = {
			x = n2x
		}
		set_temp_variable = {
			temp_x = x
		}
		divide_temp_variable = {
			temp_x = 42
		}
		add_to_temp_variable = {
			sum = temp_x
		}
		#cycle 4
		multiply_temp_variable = {
			x = n2x
		}
		set_temp_variable = {
			temp_x = x
		}
		divide_temp_variable = {
			temp_x = 216
		}
		add_to_temp_variable = {
			sum = temp_x
		}
		#cycle 5
		multiply_temp_variable = {
			x = n2x
		}
		set_temp_variable = {
			temp_x = x
		}
		divide_temp_variable = {
			temp_x = 1320
		}
		add_to_temp_variable = {
			sum = temp_x
		}
		multiply_temp_variable = {
			sum = 2_d_sqrt_pi
		}
		add = sum
	}
}
erfi = {
	#argument for erfi(x): x -> global.math_args^0
	base = 0
	modifier = {
		set_temp_variable = {
			2_d_sqrt_pi = 1.128 #~2/sqrt(pi)
		}
		set_temp_variable = {
			x = global.math_args^0
		}
		set_temp_variable = {
			2x = x
		}
		multiply_temp_variable = {
			2x = 2x
		}
		multiply_temp_variable = {
			2x = -1
		}
		set_temp_variable = {
			sum = x
		}
		#cycle 1
		multiply_temp_variable = {
			x = 2x
		}
		set_temp_variable = {
			temp_x = x
		}
		divide_temp_variable = {
			temp_x = 3
		}
		add_to_temp_variable = {
			sum = temp_x
		}
		#cycle 2
		multiply_temp_variable = {
			x = 2x
		}
		set_temp_variable = {
			temp_x = x
		}
		divide_temp_variable = {
			temp_x = 10
		}
		add_to_temp_variable = {
			sum = temp_x
		}
		#cycle 3
		multiply_temp_variable = {
			x = 2x
		}
		set_temp_variable = {
			temp_x = x
		}
		divide_temp_variable = {
			temp_x = 42
		}
		add_to_temp_variable = {
			sum = temp_x
		}
		#cycle 4
		multiply_temp_variable = {
			x = 2x
		}
		set_temp_variable = {
			temp_x = x
		}
		divide_temp_variable = {
			temp_x = 216
		}
		add_to_temp_variable = {
			sum = temp_x
		}
		#cycle 5
		multiply_temp_variable = {
			x = 2x
		}
		set_temp_variable = {
			temp_x = x
		}
		divide_temp_variable = {
			temp_x = 1320
		}
		add_to_temp_variable = {
			sum = temp_x
		}
		multiply_temp_variable = {
			sum = 2_d_sqrt_pi
		}
		add = sum
	}
}
#lg adaptation - wait in version 1.3
#arcsec - wait in version 1.3
#sech - wait in version 1.3
#csch - wait in version 1.3
#arcsinh - wait in version 1.4
#arccosh - wait in version 1.4
#arctgh - wait in version 1.4
#arcctgh - wait in version 1.4
#arcsech - wait in version 1.5
#arccsch - wait in version 1.5
#P (possibility) - wait in version 1.6
#G (gamma-function) - wait in version 1.7