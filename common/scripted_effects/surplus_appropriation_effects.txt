d_csarv = {
	calc_surplus_appropriation_real_values = yes
}
d_sa_flag = {
	if = {
		limit = {
			has_country_flag = no_sa_impact
		}
		clr_country_flag = no_sa_impact
	}
	else = {
		set_country_flag = no_sa_impact
	}
}
calc_surplus_appropriation_real_values = {
	#calc army consumtion (to do)
	#calc consumers
	set_variable = {
		raw_consumers^0 = max_manpower_k
	}
	set_variable = {
		raw_consumers^1 = num_of_controlled_factories
	}
	set_variable = {
		raw_consumers^2 = max_available_manpower_k
	}
	multiply_variable = {
		raw_consumers^0 = 0.004
	}
	multiply_variable = {
		raw_consumers^2 = 0.008
	}
	set_temp_variable = {
		k_sum = 0
	}
	for_each_loop = {
		array = raw_consumers
		value = v
		index = i
		set_temp_variable = {
			t = v
		}
		multiply_temp_variable = {
			t = surplus_appropriation_weights^i
		}
		set_variable = {
			consumers^i = t
		}
		add_to_temp_variable = {
			k_sum = t
		}
	}
	#calc resource appropriation
	set_variable = {
		food_storage_change = resource@food
	}
	subtract_from_variable = {
		food_storage_change = k_sum
	}
	set_temp_variable = {
		negative_food_storage_change = food_storage_change
	}
	multiply_temp_variable = {
		negative_food_storage_change = -1
	}
	if = {
		limit = {
			check_variable = {
				negative_food_storage_change > food_storage_value
			}
		}
		set_temp_variable = {
			food_final = food_storage_value
		}
		add_to_temp_variable = {
			food_final = resource@food
		}
		for_each_loop = {
			array = consumers
			index = i
			if = {
				limit = {
					check_variable = {
						raw_consumers^i > 0
					}
				}
				set_temp_variable = {
					t = consumers^i
				}
				divide_temp_variable = {
					t = k_sum
				}
				multiply_temp_variable = {
					t = food_final
				}
				divide_temp_variable = {
					t = raw_consumers^i
				}
				set_variable = {
					surplus_appropriation_real_values^i = t
				}
			}
			else = {
				set_variable = {
					surplus_appropriation_real_values^i = surplus_appropriation_weights^i
				}
			}
		}
	}
	else = {
		for_each_loop = {
			array = surplus_appropriation_weights
			index = i
			value = v
			set_variable = {
				surplus_appropriation_real_values^i = v
			}
		}
	}
	d_update_sa_gui = yes
}
calc_surplus_appropriation_min_value = {
	set_variable = {
		sa_min_value = surplus_appropriation_real_values^0
	}
	for_loop_effect = {
		start = 1
		end = surplus_appropriation_real_values^num
		value = i
		if = {
			limit = {
				check_variable = {
					surplus_appropriation_real_values^i < sa_min_value
				}
			}
			set_variable = {
				sa_min_value = surplus_appropriation_real_values^i
			}
		}
	}
}
sa_tick_effects = {
	if = {
		limit = {
			has_country_flag = no_sa_impact
		}
		for_loop_effect = {
			end = surplus_appropriation_mod_values^num
			value = i
			set_variable = {
				surplus_appropriation_mod_values^i = 5
			}
		}
	}
	else = {
		add_to_variable = {
			food_storage_value = food_storage_change
		}
		clamp_variable = {
			var = food_storage_value
			min = 0
		}
		calc_surplus_appropriation_real_values = yes
		calc_surplus_appropriation_min_value = yes
		for_each_loop = {
			array = surplus_appropriation_real_values
			index = i
			value = v
			#floor(surplus_appropriation_mod_values[i]) * 5
			#for index purposes (persent 0-200 to index 0-10)
			set_variable = {
				surplus_appropriation_mod_values^i = v
			}
			multiply_variable = {
				surplus_appropriation_mod_values^i = 0.005
			}
			multiply_variable = {
				surplus_appropriation_mod_values^i = 1000
			}
		}
	}
}
d_update_sa_gui = { #d_ added for debug issues
	update_sa_slider_x_pos = yes
	update_sa_progressbar_frame = yes
}
update_sa_slider_x_pos = {
	for_each_loop = {
		array = surplus_appropriation_weights
		value = v
		index = i
		set_variable = {
			surplus_appropriation_slider_x_pos^i = v
		}
		multiply_variable = {
			surplus_appropriation_slider_x_pos^i = 175
		}
	}
}
update_sa_progressbar_frame = {
	for_each_loop = {
		array = surplus_appropriation_real_values
		value = v
		index = i
		set_variable = {
			surplus_appropriation_progressbar_frame^i = v
		}
		multiply_variable = {
			surplus_appropriation_progressbar_frame^i = 100
		}
	}
}
#IMPORTANT FOR GUI: CALL THIS IF YOU WANT TO DISABLE, DON`t JUST SET COUNTRY FLAG
disable_sa_mechanic = {
	set_variable = {
		sam_menu = 0
	}
	set_country_flag = no_sa_impact
}