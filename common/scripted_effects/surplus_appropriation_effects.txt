d_csarv = {	#only for debug issues
	calc_surplus_appropriation_real_values = yes
}
d_sa_flag = {	#d_ added for debug issues
	if = {
		limit = {
			has_country_flag = no_sa_impact
		}
		clr_country_flag = no_sa_impact
	}
	else = {
		set_country_flag = no_sa_impact
	}
}
calc_surplus_appropriation_real_values = {
	#calc army consumtion (to do more complicated and precise)
	#calc consumers
	set_variable = {
		raw_consumers^0 = max_manpower_k
	}
	set_variable = {
		raw_consumers^1 = num_of_controlled_factories
	}
	set_variable = {
		raw_consumers^2 = max_available_manpower_k
	}
	multiply_variable = {
		raw_consumers^0 = 0.004
	}
	multiply_variable = {
		raw_consumers^2 = 0.008
	}
	set_variable = {
		sa_consumtion_sum = 0
	}
	for_each_loop = {
		array = raw_consumers
		value = v
		index = i
		set_variable = {
			consumers^i = v
		}
		multiply_variable = {
			consumers^i = surplus_appropriation_weights^i
		}
		set_variable = {
			super_raw_consumers^i = consumers^i
		}
	}
	#applying modifiers#
	multiply_variable = {
		consumers^0 = mtth:civil_consumption_factor
	}
	clamp_variable = {
		var = consumers^0
		min = 0
	}
	multiply_variable = {
		consumers^1 = mtth:facilities_consumption_factor
	}
	clamp_variable = {
		var = consumers^1
		min = 0
	}
	multiply_variable = {
		consumers^2 = mtth:army_consumption_factor
	}
	clamp_variable = {
		var = consumers^2
		min = 0
	}
	#calc total consumtion
	for_each_loop = {
		array = consumers
		value = v
		add_to_variable = {
			sa_consumtion_sum = v
		}
	}
	#calc resource appropriation
	set_variable = {
		food_storage_change = resource@food
	}
	if = {
		limit = {
			#prevent negative effect from buffing negative resources
			check_variable = {
				food_storage_change > 0
			}
		}
		multiply_variable = {
			food_storage_change = mtth:food_gain_factor
		}
		clamp_variable = {
			var = food_storage_change
			min = 0
		}
	}
	add_to_variable = {
		food_storage_change = modifier@food_gain
	}
	#save value for first if statement
	set_temp_variable = {
		food_vs_consumtion = food_storage_change
	}
	subtract_from_variable = {
		food_storage_change = sa_consumtion_sum
	}
	set_temp_variable = {
		negative_food_storage_change = food_storage_change
	}
	multiply_temp_variable = {
		negative_food_storage_change = -1
	}
	if = {
		limit = {
			check_variable = {
				negative_food_storage_change > food_storage_value
			}
		}
		if = {
			limit = {
				check_variable = {
					food_vs_consumtion < 0
				}
			}
			set_temp_variable = {
				food_vs_consumtion = modifier@food_gain
			}
			add_to_temp_variable = {
				food_vs_consumtion = food_storage_value
			}
			divide_temp_variable = {
				food_vs_consumtion = negative_food_storage_change
			}
			for_each_loop = {
				array = consumers
				index = i
				set_variable = {
					surplus_appropriation_real_values^i = food_vs_consumtion
				}
				clamp_variable = {
					var = surplus_appropriation_real_values^i
					min = 0
					max = surplus_appropriation_weights^i
				}
			}
		}
		else = {
			add_to_temp_variable = {
				food_vs_consumtion = food_storage_value
			}
			divide_temp_variable = {
				food_vs_consumtion = sa_consumtion_sum
			}
			for_each_loop = {
				array = consumers
				index = i
				set_variable = {
					surplus_appropriation_real_values^i = surplus_appropriation_weights^i
				}
				if = {
					limit = {
						check_variable = {
							raw_consumers^i > 0
						}
					}
					multiply_variable = {
						surplus_appropriation_real_values^i = food_vs_consumtion
					}
				}
				clamp_variable = {
					var = surplus_appropriation_real_values^i
					min = 0
					max = 2
				}
			}
		}
	}
	else = {
		for_each_loop = {
			array = surplus_appropriation_weights
			index = i
			value = v
			set_variable = {
				surplus_appropriation_real_values^i = v
			}
		}
	}
	update_sa_gui = yes
}
calc_surplus_appropriation_min_value = {
	find_lowest_in_array = {
		array = surplus_appropriation_real_values
		value = temp_sa_min_value
	}
	#find_lowest_in_array value stores temp variable - set to non temp variable
	set_variable = {
		sa_min_value = temp_sa_min_value
	}
}
d_csav = {
	calc_surplus_appropriation_average_value = yes
}
calc_surplus_appropriation_average_value = {
	set_variable = {
		sa_average_value = surplus_appropriation_real_values^0
	}
	for_loop_effect = {
		start = 1
		end = surplus_appropriation_real_values^num
		value = i
		add_to_variable = {
			sa_average_value = surplus_appropriation_real_values^i
		}
	}
	divide_variable = {
		sa_average_value = surplus_appropriation_real_values^num
	}
}
sa_tick_effects = {
	if = {
		limit = {
			has_country_flag = no_sa_impact
		}
		for_loop_effect = {
			end = surplus_appropriation_mod_values^num
			value = i
			set_variable = {
				surplus_appropriation_mod_values^i = 5
			}
		}
	}
	else = {
		add_to_variable = {
			food_storage_value = food_storage_change
		}
		clamp_variable = {
			var = food_storage_value
			min = 0
		}
		calc_surplus_appropriation_real_values = yes
		calc_surplus_appropriation_min_value = yes
		calc_surplus_appropriation_average_value = yes
		for_each_loop = {
			array = surplus_appropriation_real_values
			index = i
			value = v
			#floor(surplus_appropriation_mod_values[i]) * 5
			#for index purposes (persent 0-200 to index 0-10)
			set_variable = {
				surplus_appropriation_mod_values^i = v
			}
			multiply_variable = {
				surplus_appropriation_mod_values^i = 5
			}
		}
	}
}
update_sa_gui = {
	update_sa_slider_x_pos = yes
	update_sa_progressbar_frame = yes
}
update_sa_slider_x_pos = {
	for_each_loop = {
		array = surplus_appropriation_weights
		value = v
		index = i
		set_variable = {
			surplus_appropriation_slider_x_pos^i = v
		}
		multiply_variable = {
			surplus_appropriation_slider_x_pos^i = 175
		}
	}
}
update_sa_progressbar_frame = {
	for_each_loop = {
		array = surplus_appropriation_real_values
		value = v
		index = i
		set_variable = {
			surplus_appropriation_progressbar_frame^i = v
		}
		multiply_variable = {
			surplus_appropriation_progressbar_frame^i = 100
		}
	}
}
#use script for modifing food storage directly with tooltip and food consumption update
#use temp vars delta_food_storage for modification
add_to_food_storage = {
	multiply_temp_variable = {
		delta_food_storage = -1
	}
	clamp_temp_variable = {
		var = delta_food_storage
		max = food_storage_value
	}
	if = {
		limit = {
			NOT = {
				check_variable = {
					delta_food_storage = 0
				}
			}
		}
		multiply_temp_variable = {
			delta_food_storage = -1
		}
		add_to_variable = {
			food_storage_value = delta_food_storage
		}
		calc_surplus_appropriation_real_values = yes
		calc_surplus_appropriation_min_value = yes
		calc_surplus_appropriation_average_value = yes
		for_each_loop = {
			array = surplus_appropriation_real_values
			index = i
			value = v
			#floor(surplus_appropriation_mod_values[i]) * 5
			#for index purposes (persent 0-200 to index 0-10)
			set_variable = {
				surplus_appropriation_mod_values^i = v
			}
			multiply_variable = {
				surplus_appropriation_mod_values^i = 5
			}
		}
		custom_effect_tooltip = change_food_storage_value
	}
}
#IMPORTANT FOR GUI: CALL THIS IF YOU WANT TO DISABLE, DON`t JUST SET COUNTRY FLAG
#Note: this will also close surplus appropriation window
disable_sa_mechanic = {
	set_variable = {
		sam_menu = 0
	}
	set_country_flag = no_sa_impact
}
#harvest failure update (for proper indication)
#use temp vars delta_harvest_failure_food & delta_harvest_failure_supply for modification
#NOTE: adding positive value will make modifier more powerfull
#NOTE: USE IN COUNTRY SCOPE!
harvest_failure_update = {
	if = {
		limit = {
			has_dynamic_modifier = {
				modifier = harvest_failure_modifier
			}
		}
		clamp_temp_variable = {
			var = delta_harvest_failure_food
			min = harvest_failure_food
		}
		clamp_temp_variable = {
			var = delta_harvest_failure_supply
			min = harvest_failure_supply
		}
		if = {
			limit = {
				check_variable = {
					delta_harvest_failure_food = harvest_failure_food
				}
				check_variable = {
					delta_harvest_failure_supply = harvest_failure_supply
				}
			}
			remove_dynamic_modifier = {
				modifier = harvest_failure_modifier
			}
			clear_variable = harvest_failure_food
			clear_variable = harvest_failure_supply
		}
		else_if = {
			limit = {
				OR = {
					check_variable = {
						var = delta_harvest_failure_food
						value = 0
						compare = not_equals
					}
					check_variable = {
						var = delta_harvest_failure_supply
						value = 0
						compare = not_equals
					}
				}
			}
			subtract_from_variable = {
				harvest_failure_food = delta_harvest_failure_food
			}
			subtract_from_variable = {
				harvest_failure_supply = delta_harvest_failure_supply
			}
			multiply_temp_variable = {
				delta_harvest_failure_food = -1
			}
			multiply_temp_variable = {
				delta_harvest_failure_supply = -1
			}
			custom_effect_tooltip = change_harvest_failure_modifier
		}
	}
}