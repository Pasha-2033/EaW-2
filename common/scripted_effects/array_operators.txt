#Created by lead programmer of EaW 2 (vk: @uber_medic, @communistic_sistema)
#vesrion 1.0
#use scriped effects, less code, write code with pleasure :)
#this functions are able to hold arrays with indexes from -n to +n (except for reverse_array, sort_array)

#Usage:
#set_variable = { global.math_args^0 = 2 }
#set_variable = { global.math_args^0 = -1 }
#clear_array = global.math_array_arg
#set_temp_variable = {
#	counter_0 = 0
#}
#while_loop_effect = {
#	limit = {
#		has_variable = your_array^counter_0
#	}
#	set_variable = {
#		global.math_array_arg^counter_0 = your_array^counter_0
#	}
#	add_to_temp_variable = {
#		counter_0 = 1
#	}
#}
#set_temp_variable = {
#	counter_0 = -1
#}
#while_loop_effect = {
#	limit = {
#		has_variable = your_array^counter_0
#	}
#	set_variable = {
#		global.math_array_arg^counter_0 = your_array^counter_0
#	}
#	subtract_from_temp_variable = {
#		counter_0 = 1
#	}
#}
#resize_array_by_si_ei = yes
#clear_array = your_array
#set_temp_variable = {
#	counter_0 = 0
#}
#while_loop_effect = {
#	limit = {
#		has_variable = global.math_array_arg^counter_0
#	}
#	set_variable = {
#		your_array^counter_0 = global.math_array_arg^counter_0
#	}
#	add_to_temp_variable = {
#		counter_0 = 1
#	}
#}
#set_temp_variable = {
#	counter_0 = -1
#}
#while_loop_effect = {
#	limit = {
#		has_variable = global.math_array_arg^counter_0
#	}
#	set_variable = {
#		your_array^counter_0 = global.math_array_arg^counter_0
#	}
#	subtract_from_temp_variable = {
#		counter_0 = 1
#	}
#}

#Note static values, that module uses as args, can be rewrited by module effect! So update them just before module usage!

get_min_index = {
	#array to analyze = global.math_array_arg
	set_temp_variable = {
		counter_0 = 0
	}
	while_loop_effect = {
		limit = {
			has_variable = global.math_array_arg^counter_0
		}
		subtract_from_temp_variable = {
			counter_0 = 1
		}
	}
	add_to_temp_variable = {
		counter_0 = 1
	}
	set_variable = {
		global.math_args^3 = counter_0
	}
}
get_max_index = {
	#array to analyze = global.math_array_arg
	set_temp_variable = {
		counter_0 = 0
	}
	while_loop_effect = {
		limit = {
			has_variable = global.math_array_arg^counter_0
		}
		add_to_temp_variable = {
			counter_0 = 1
		}
	}
	subtract_from_temp_variable = {
		counter_0 = 1
	}
	set_variable = {
		global.math_args^3 = counter_0
	}
}
get_array_size = {
	#array to analyze = global.math_array_arg
	get_max_index = yes
	set_temp_variable = {
		max_i = global.math_args^3
	}
	get_min_index = yes
	subtract_from_temp_variable = {
		max_i = global.math_args^3
	}
	add_to_temp_variable = {
		max_i = 1
	}
	set_variable = {
		global.math_args^3 = max_i
	}
}
resize_array_by_si_ei = {
	#array to resize = global.math_array_arg
	get_array_size = yes
	set_temp_variable = {
		a_size = global.math_args^3
	}
	get_min_index = yes
	set_temp_variable = {
		min_i = global.math_args^3
	}
	get_max_index = yes
	if = {
		limit = {
			check_variable = {
				a_size < 2
			}
		}
		#pass, no need to work with empty/short list (optimisation)
	}
	else_if = {
		limit = {
			check_variable = {
				global.math_args^2 < global.math_args^1
			}
		}
		log = "impossible to resize array by si and ei: ei can`t be less than si"
	}
	else_if = {
		limit = {
			check_variable = {
				global.math_args^1 < min_i
			}
		}
		log = "impossible to resize array by si and ei: si out of bounds"
	}
	else_if = {
		limit = {
			check_variable = {
				global.math_args^2 > global.math_args^3
			}
		}
		log = "impossible to resize array by si and ei: ei out of bounds"
	}
	else = {
		add_to_variable = {
			global.math_args^2 = 1
		}
		while_loop_effect = {
			limit = {
				check_variable = {
					global.math_args^1 < global.math_args^2
				}
			}
			add_to_temp_array = {
				temp_array = global.math_array_arg^global.math_args^1
			}
			add_to_variable = {
				global.math_args^1 = 1
			}
		}
		clear_array = global.math_array_arg
		for_each_loop = {
			array = temp_array
			add_to_array = {
				global.math_array_arg = v
			}
		}
	}
}
normalise_array = {
	#array to normalise = global.math_array_arg
	get_array_size = yes
	if = {
		limit = {
			check_variable = {
				global.math_args^3 < 2
			}
		}
		#pass, no need to work with empty/short list (optimisation)
	}
	else_if = {
		limit = {
			NOT = {
				has_variable = global.math_array_arg^-1
			}
		}
		#pass, already normalised (optimisation)
	}
	else = {
		get_min_index = yes
		set_temp_variable = {
			counter_0 = global.math_args^3
		}
		while_loop_effect = {
			limit = {
				has_variable = global.math_array_arg^counter_0
			}
			add_to_temp_array = {
				temp_array = global.math_array_arg^counter_0
			}
			add_to_temp_variable = {
				counter_0 = 1
			}
		}
		clear_array = global.math_array_arg
		for_each_loop = {
			array = temp_array
			add_to_array = {
				global.math_array_arg = v
			}
		}
	}
}
denormalise_array = {
	#array to denormalise = global.math_array_arg
	#denormalisation index = global.math_args^3 (normal and positive size array will get it`s values, but value will have index = start_index - denormalisation_index)
	get_array_size = yes
	if = {
		limit = {
			check_variable = {
				global.math_args^3 < 2
			}
		}
		#pass, no need to work with empty/short list (optimisation)
	}
	else = {
		get_min_index = yes
		set_temp_variable = {
			min_i = global.math_args^3
		}
		get_max_index = yes
		if = {
			limit = {
				if = {
					limit = {
						check_variable = {
							global.math_args^1 > 0
						}
					}
					check_variable = {
						global.math_args^1 > global.math_args^1
					}
				}
				else = {
					check_variable = {
						global.math_args^1 < min_i
					}
				}
			}
			log = "impossible to denormalise array: out of possible index"
		}
		else = {
			get_max_index = yes
			set_temp_variable = {
				counter_0 = global.math_args^3
			}
			set_temp_variable = {
				counter_1 = global.math_args^3
			}
			subtract_from_temp_variable = {
				counter_1 = global.math_args^1
			}
			get_min_index = yes
			subtract_from_variable = {
				global.math_args^3 = 1
			}
			while_loop_effect = {
				limit = {
					check_variable = {
						counter_0 > global.math_args^3
					}
				}
				set_temp_variable = {
					temp_array^counter_1 = global.math_array_arg^counter_0
				}
				subtract_from_temp_variable = {
					counter_0 = 1
				}
				subtract_from_temp_variable = {
					counter_1 = 1
				}
			}
			clear_array = global.math_array_arg
			set_temp_variable = {
				counter_0 = 0
			}
			while_loop_effect = {
				limit = {
					has_variable = temp_array^counter_0
				}
				set_variable = {
					global.math_array_arg^counter_0 = temp_array^counter_0
				}
				add_to_temp_variable = {
					counter_0 = 1
				}
			}
			set_temp_variable = {
				counter_0 = -1
			}
			while_loop_effect = {
				limit = {
					has_variable = temp_array^counter_0
				}
				set_variable = {
					global.math_array_arg^counter_0 = temp_array^counter_0
				}
				subtract_from_temp_variable = {
					counter_0 = 1
				}
			}
		}
	}
}
reverse_array = {
	#array to sort = global.math_array_arg, use normal array!
	get_array_size = yes
	if = {
		limit = {
			check_variable = {
				global.math_args^3 < 2
			}
		}
		#pass, no need to work with empty/short list (optimisation)
	}
	else = {
		set_variable = {
			global.math_args^3 = 0
		}
		set_temp_variable = {
			counter_0 = global.math_array_arg^num
		}
		subtract_from_temp_variable = {
			counter_0 = 1
		}
		while_loop_effect = {
			limit = {
				check_variable = {
					counter_0 > -1
				}
			}
			add_to_temp_array = {
				temp_array = global.math_array_arg^counter_0
			}
			subtract_from_temp_variable = {
				counter_0 = 1
			}
		}
		clear_array = global.math_array_arg
		for_each_loop = {
			array = temp_array
			add_to_array = {
				global.math_array_arg = v
			}
		}
	}
}
sort_array = {
	#array to sort = global.math_array_arg, use normal array!
	#sorting: highest in array first
	get_array_size = yes
	if = {
		limit = {
			check_variable = {
				global.math_args^3 < 2
			}
		}
		#pass, no need to work with empty/short list (optimisation)
	}
	else = {
		while_loop_effect = {
			limit = {
				check_variable = {
					global.math_array_arg^num > 0
				}
			}
			find_highest_in_array = {
				array = global.math_array_arg
				value = v
				index = i
			}
			add_to_temp_array = {
				temp_array = v
			}
			remove_from_array = {
				array = global.math_array_arg
				index = i
			}
		}
		for_each_loop = {
			array = temp_array
			add_to_array = {
				global.math_array_arg = v
			}
		}
	}
}