# this one is called for nightly tests
ai_test_startup_effect = {
	# if = {
	# 	limit = { is_major = yes } 
	# 	#enable crypto agency in ~2.5 years
	# 	country_event = { id = generic_debug.42 days = 900 }
	# }
	# if = {
	# 	limit = { 
	# 		OR = {
	# 			tag = ENG
	# 		}
	# 	} 
	# 	#give usa access to france & england in ~4 year
	# 	country_event = { id = generic_debug.43 days = 1500 }
	# }
}

# effects that starts with name d_ will be available as console command
# use "effect_name_DESC" to define a description

d_collaboration = {
	if = {
		limit = { tag = FROM }
		log = "Error:"
		log = "  right click a country to select it for adding collaboration"
		log = "  you can specify collaboration amount to add or just use 'collaboration' to add 10%"
		log = " "
	}
	else = {
		FROM = {
			add_collaboration = { 
				target = PREV 
				value = args^0?0.1				
			}
			
			log = "Added [?args^0?0.1|H%] collaboration for [PREV.GetName]"
		}
	}
}

d_add_fake_armies = {
	if = {
		# create template if not exist
		limit = {
			not = {
				has_country_flag = fake_intel_template_created
			}
		}
		division_template = {
			name = "Fake Intel Division"
			
			is_fake_intel_division = yes
			is_locked = yes
			regiments = {
				fake_intel_unit = { x = 0 y = 0 }
			}
		}
		set_country_flag = fake_intel_template_created
	}
	
	# give it an id and store id & current date so it can be deleted later
	if = {
		limit = { NOT = { has_variable = fake_intel_id } }
		set_variable = { fake_intel_id = 1000 }
	}
	set_temp_variable = { id_to_set = fake_intel_id }
	add_to_variable = { fake_intel_id = 1 }
	add_to_array = {
		fake_intel_ids_to_delete = id_to_set
	}
	set_variable = { num_days_for_fake_intel_id@var:id_to_set = global.num_days }
	
	# minimum of 0.25 of current armies or 24
	set_temp_variable = { num_to_create = num_armies }
	multiply_temp_variable = { num_to_create = 0.25 }
	round_temp_variable = num_to_create
	add_to_temp_variable = { num_to_create = 1 }
	clamp_temp_variable = {
		var = num_to_create
		min = 24
	}
	
	# create actual units
	capital_scope = {
		create_unit = {
			division = "Division_template = \"Fake Intel Division\" start_experience_factor = 0.5" 
			owner = PREV
			count = num_to_create
			id = id_to_set
		}
	}
	
	# will delete them after 90 days
	country_event = { id = lar_fake_intel_units.1 days = 90 }
	
	log = "Done"
}
d_get_state = {
	if = {
		limit = {
			FROM = {
				tag = ROOT.owner
			}
		}
		log = "[FROM.GetTag] already have state with [PREV.GetID] id"
	}
	else = {
		FROM = {
			transfer_state = PREV
		}
		log = "State with [PREV.GetID] id is assigned to [FROM.GetTag], [ROOT.owner.GetTag]"
	}
}
#government idea modding (move to debug decisions)
d_increase_science_base_idea = {
	increase_science_base_idea = yes
	log = "Increased science base idea for [ROOT.GetTag]"
	if = {
		limit = {
			has_country_flag = disallow_science_base_flag_fix
		}
		log = "No fixes for science base flag applied for [ROOT.GetTag]"
	}
}
d_decrease_science_base_idea = {
	decrease_science_base_idea = yes
	log = "Decreased science base idea for [ROOT.GetTag]"
	if = {
		limit = {
			has_country_flag = disallow_science_base_flag_fix
		}
		log = "No fixes for science base flag applied for [ROOT.GetTag]"
	}
}
#get mod data
d_get_tags = {
	log = "All existing tags:"
	for_each_scope_loop = {
		array = global.countries
		log = "Tag: [?THIS.GetTag], exists: [country_exists_text], dynamic tag: [country_tag_dynamic_text], name: [?THIS.GetName]"
	}
}


#experimental debug code
#dangerous, can crash, can break game timecontinium
d_ver = {
	set_variable = {
		global.t = -100
	}
	set_variable = {
		global.tt = -100
	}
	set_variable = {
		global.ttt = -100
	}
	country_event = {
		id = recursive.1
	}
}
rec_counter = {
	meta_effect = {
		text = {
			set_temp_variable = {
				v = [TTT].[TT].[T]
			}
		}
		TTT = global.ttt
		TT = global.tt
		T = global.t
	}
	log = "[?global.ttt].[?global.tt].[?global.t]:[?v]"
	add_to_variable = {
		global.t = 1
	}
	if = {
		limit = {
			check_variable = {
				global.t > 99
			}
		}
		set_variable = {
			global.t = 000
		}
		add_to_variable = {
			global.tt = 1
		}
	}
	if = {
		limit = {
			check_variable = {
				global.tt > 99
			}
		}
		set_variable = {
			global.tt = 000
		}
		add_to_variable = {
			global.ttt = 1
		}
	}
}
d_d = {
	#DON`T DELETE THIS COMMENT!!!
	# # - cause next command name, if not in same {} - none
	# /,\,:,*,@,&,%,?,$,^,â„–,_,+,|,`,~, more than one "." or their combination - cause text
	# [...] - cause loc var
	# [?...] - cause float var
	# >,<,' - cause only start symbol (if it`s starts with it (if not string notation))
	# ;,(,),{,},"," - cause text, cut of all everithing after it and itself
	# "-" - cause negative float
	#using log in line without = and arg will print "{"
	set_variable = {
		tp0v = 1
	}
	set_variable = {
		tp1v = 2
	}
	set_variable = {
		tp2v = 3
	}
	set_variable = {
		tp3v = 4
	}
	log = "tp0"
}
d_update = {
	set_temp_variable = {
		v = tp0v
	}
	set_variable = {
		tp0v = tp1v
	}
	set_variable = {
		tp1v = tp2v
	}
	set_variable = {
		tp2v = tp3v
	}
	set_variable = {
		tp3v = v
	}
}
d_fix_popularities = {
	for_each_scope_loop = {
		array = global.countries
		if = {
			limit = {
				check_variable = {
					party_popularity@democratic = 0
				}
				check_variable = {
					party_popularity@fascism = 0
				}
				check_variable = {
					party_popularity@neutrality = 0
				}
				check_variable = {
					party_popularity@communism = 0
				}
				check_variable = {
					party_popularity@harmony = 0
				}
				check_variable = {
					party_popularity@socialism = 0
				}
				check_variable = {
					party_popularity@radicalism = 0
				}
				check_variable = {
					party_popularity@unholy = 0
				}
				check_variable = {
					party_popularity@holy = 0
				}
				check_variable = {
					party_popularity@technocracy = 0
				}
				check_variable = {
					party_popularity@anarchism = 0
				}
				check_variable = {
					party_popularity@militarism = 0
				}
			}
			set_popularities = {
				communism = 100
			}
			set_politics = {
				ruling_party = communism
			}
		}
	}
}

#experimental
d_gettokens = {
	#meta_effect = {
	#	text = {
	#		set_temp_variable = {
	#			Y_token = token:[T]
	#		}
	#	}
	#	T = "none"
	#}
	#log = "T1:[?Y_token]"
	#log = "T2:[?Y_token.GetTokenLocalizedKey]"
	log = " [?358.GetTokenLocalizedKey]"
	for_loop_effect = {
		end = 20000
		value = i
		log = "token-[?i]:[?i.GetTokenKey]"
		#meta_effect = {
		#	text = {
		#		log = "T-[I]:"
		#	}
		#	I = i
		#}
	}
}
d_etk = {
	set_temp_variable = {
		tv = 120 #width
	}
	set_temp_variable = {
		tv2 = tv.GetTokenKey
	}
	log = " [?tv.GetTokenKey]"
	log = " [?tv2]"
}