scripted_gui = {
	surplus_appropriation_indicator = {
		context_type = player_context
		window_name = "surplus_appropriation_indicator"
		parent_window_token = top_bar
		dirty = sa_min_value
		visible = {
			NOT = {
				has_country_flag = no_sa_impact
			}
		}
	}
	surplus_appropriation_menu_entry = {
		context_type = player_context
		window_name = "surplus_appropriation_menu_entry"
		parent_window_name = "after_intel_agency_button"
		effects = {
            surplus_appropriation_menu_entry_button_click = {
				if = {
					limit = {
						check_variable = {
							sam_menu = 1
						}
					}
					set_variable = {
						sam_menu = 0
					}
				}
				else = {
					if = {
						limit = {
							is_ai = no
						}
						calc_surplus_appropriation_real_values = yes
					}
					set_variable = {
						sam_menu = 1
					}
				}
            }
		}
		triggers = {
			surplus_appropriation_menu_entry_button_visible = {
				set_temp_variable = {
					SAME_FRAME = 1
				}
				add_to_temp_variable = {
					SAME_FRAME = sam_menu
				}
			}
			surplus_appropriation_menu_entry_button_click_enabled = {
				custom_trigger_tooltip = {
					tooltip = sa_impact
					NOT = {
						has_country_flag = no_sa_impact
					}
				}
			}
		}
		properties = {
			surplus_appropriation_menu_entry_button = {
				frame = SAME_FRAME
			}
		}
		ai_enabled = {
			always = yes
		}
		ai_test_interval = 168
		ai_test_variance = 0
		ai_max_weight_taken_per_test = 1
		ai_weights = {
			surplus_appropriation_menu_entry_button_click = {
				ai_will_do = {
					base = 1000
					modifier = {
						check_variable = {
							sam_menu = 1
						}
						factor = 0
					}
				}
				weight = 1
			}
		}
	}
	surplus_appropriation_menu = {
		context_type = player_context
		window_name = "surplus_appropriation_menu"
		parent_window_token = top_bar
		#for some reason gui cant work properly with dirty - not arrays, not custom variable
		#if find solution - fix this issue (to do)
		#note - in game vars are not able to be combined with own vars
		visible = {
			check_variable = {
				sam_menu = 1
			}
			NOT = {
				has_country_flag = no_sa_impact
			}
		}
		dynamic_lists = {
			management_grid = {
				array = global.surplus_appropriation_grid
				change_scope = no
				entry_container = "management_container_entry"
				index = sa_i
				ai_weights = {
					increase_click = {
						ai_will_do = {
							base = 0
							modifier = {
								#ai (to do)
								set_temp_variable = {
									r = 0
								}
								if = {
									#if country will have "sa_ai_cap" array, ai will follow its values
									#otherwise ai will deside by itself
									#WARNING! array MUST be size of 3 (^num = 3)
									limit = {
										check_variable = {
											sa_ai_cap^num = 3
										}
									}
									if = {
										limit = {
											check_variable = {
												surplus_appropriation_weights^sa_i < sa_ai_cap^sa_i
											}
										}
										add_to_temp_variable = {
											r = 100
										}
									}
								}
								else = {
									if = {
										limit = {
											check_variable = {
												sa_i = 0
											}
										}
										if = {
											limit = {
												check_variable = {
													raw_consumers^0 = 0
												}
												check_variable = {
													surplus_appropriation_weights^sa_i < 1
												}
											}
											add_to_temp_variable = {
												r = 100
											}
										}
										else = {
											##############
										}
									}
									else_if = {
										limit = {
											check_variable = {
												sa_i = 1
											}
										}
										if = {
											limit = {
												check_variable = {
													raw_consumers^1 = 0
												}
												check_variable = {
													surplus_appropriation_weights^sa_i < 1
												}
											}
											add_to_temp_variable = {
												r = 100
											}
										}
										else = {
											##############
										}
									}
									else = {
										if = {
											limit = {
												check_variable = {
													raw_consumers^2 = 0
												}
												check_variable = {
													surplus_appropriation_weights^sa_i < 1
												}
											}
											add_to_temp_variable = {
												r = 100
											}
										}
										else = {
											##############
										}
									}
								}
								add = r
							}
							modifier = {
								check_variable = {
									surplus_appropriation_weights^sa_i > 1.8
								}
								factor = 0
							}
						}
						weight = 1
					}
					decrease_click = {
						ai_will_do = {
							base = 0
							modifier = {
								#ai (to do)
								set_temp_variable = {
									r = 0
								}
								if = {
									#if country will have "sa_ai_cap" array, ai will follow its values
									#otherwise ai will deside by itself
									#WARNING! array MUST be size of 3 (^num = 3)
									limit = {
										check_variable = {
											sa_ai_cap^num = 3
										}
									}
									if = {
										limit = {
											check_variable = {
												surplus_appropriation_weights^sa_i > sa_ai_cap^sa_i
											}
										}
										add_to_temp_variable = {
											r = 100
										}
									}
								}
								else = {
									if = {
										limit = {
											check_variable = {
												sa_i = 0
											}
										}
										if = {
											limit = {
												check_variable = {
													raw_consumers^0 = 0
												}
												check_variable = {
													surplus_appropriation_weights^sa_i > 1
												}
											}
											add_to_temp_variable = {
												r = 100
											}
										}
										else = {
											##############
										}
									}
									else_if = {
										limit = {
											check_variable = {
												sa_i = 1
											}
										}
										if = {
											limit = {
												check_variable = {
													raw_consumers^1 = 0
												}
												check_variable = {
													surplus_appropriation_weights^sa_i > 1
												}
											}
											add_to_temp_variable = {
												r = 100
											}
										}
										else = {
											##############
										}
									}
									else = {
										if = {
											limit = {
												check_variable = {
													raw_consumers^2 = 0
												}
												check_variable = {
													surplus_appropriation_weights^sa_i > 1
												}
											}
											add_to_temp_variable = {
												r = 100
											}
										}
										else = {
											##############
										}
									}
								}
								add = r
							}
							modifier = {
								check_variable = {
									surplus_appropriation_weights^sa_i < 0.2
								}
								factor = 0
							}
						}
						weight = 1
					}
				}
			}
			slider_buttons_grid = {
				array = global.surplus_appropriation_slider_buttons
				change_scope = no
				entry_container = "slider_button_entry"
				index = sa_s_i
			}
		}
		triggers = {
			decrease_click_enabled = {
				check_variable = {
					surplus_appropriation_weights^sa_i > 0
				}
			}
			increase_click_enabled = {
				check_variable = {
					surplus_appropriation_weights^sa_i < 2
				}
			}
			civil_food_modifier_icon_visible = {
				set_temp_variable = {
					cfm_frame = surplus_appropriation_mod_values^0
				}
				add_to_temp_variable = {
					cfm_frame = 1
				}
			}
			facilities_food_modifier_icon_visible = {
				set_temp_variable = {
					ffm_frame = surplus_appropriation_mod_values^1
				}
				add_to_temp_variable = {
					ffm_frame = 1
				}
			}
			army_food_modifier_icon_visible = {
				set_temp_variable = {
					afm_frame = surplus_appropriation_mod_values^2
				}
				add_to_temp_variable = {
					afm_frame = 1
				}
			}
			food_production_visible = {
				set_temp_variable = {
					real_food_production = mtth:real_food_production
				}
			}
		}
		effects = {
			close_button_click = {
				set_variable = {
					sam_menu = 0
				}
			}
			info_button_click = {
				set_variable = {
					encyclopedia_tab = 3
				}
				set_variable = {
					selected_global_mechanic = 1
				}
			}
			decrease_click = {
				subtract_from_variable = {
					surplus_appropriation_weights^sa_i = 0.2
				}
				calc_surplus_appropriation_real_values = yes
			}
			increase_click = {
				add_to_variable = {
					surplus_appropriation_weights^sa_i = 0.2
				}
				calc_surplus_appropriation_real_values = yes
			}
			slider_button_click = {
				set_variable = {
					surplus_appropriation_weights^sa_i = global.surplus_appropriation_slider_buttons^sa_s_i
				}
				calc_surplus_appropriation_real_values = yes
			}
			min_slider_click = {
				set_variable = {
					surplus_appropriation_weights^sa_i = 0
				}
				calc_surplus_appropriation_real_values = yes
			}
			max_slider_click = {
				set_variable = {
					surplus_appropriation_weights^sa_i = 2
				}
				calc_surplus_appropriation_real_values = yes
			}
		}
		properties = {
			slider = {
				x = surplus_appropriation_slider_x_pos^sa_i
			}
			progerss = {
				frame = surplus_appropriation_progressbar_frame^sa_i
			}
			civil_food_modifier_icon = {
				frame = cfm_frame
			}
			facilities_food_modifier_icon = {
				frame = ffm_frame
			}
			army_food_modifier_icon = {
				frame = afm_frame
			}
		}
		#to do ai later, when this shit can be fixed! blyat'!
		ai_enabled = {
			always = yes
		}
		ai_test_interval = 168
		ai_test_variance = 0
		ai_max_weight_taken_per_test = 3
	}
}